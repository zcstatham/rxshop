<?php

namespace app\api\controller\dev;

use service\sns\SnsService;
use service\WeChartMiniService;
use think\facade\Log;

class Index extends Base
{

    protected function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
    }


    public function index()
    {

    }

    /**
     * 登录/注册
     * 第三方登录 wechart_mini wechart alipay
     * @return \think\response\Json
     */
    public function login()
    {
        if (isset($this->params['inviter_code'])) {
            $inviter_code = $this->params['inviter_code'];
        }
        if (!isset($this->params['code']) || !$this->params['code']) {
            return json(json_error_exception('20201'));
        }else {
            $wechart = new WeChartMiniService();
            $username = 'wechart_mini';
            $password = $wechart->Login($this->params['code']);
            $type = 4;
        }
        $user = model('User');
        $data = $user->login(array(
            'username' => $username,
            'password' => $password,
            'inviter_code' => $inviter_code,
        ), $type);

        if ($data['uid'] > 0) {
            $jwt = new \service\EncryptService();
            $return = array(
                'inviter_code' => $data['inviter_code'],
                'access_token' => $jwt->createToken(array(
                    'uid' => $data['uid'],
                ), 60 * 60 * 2, 'access_token'),
                'refresh_token' => $jwt->createToken(array(
                    'uid' => $data['uid'],
                ), 86400 * 30, 'refresh_token'),
                'expire_in' => 60 * 60 * 2,
                're_expire_in' => 86400 * 30,
                'token_type' => 'Bearer',
            );
            $this->data['data'] = $return;
        } else {
            $this->data = json_error_exception('10101');
        }
        return json($this->data);
    }

    /**
     * 获取token
     * @return \think\response\Json
     */
    public function accessToken()
    {
        $jwt = new \service\EncryptService();
        $checkToken = $jwt->checkToken($this->params['refresh_token']);
        if (is_numeric($checkToken)) {
            $checkToken = $checkToken == 20003 ? 20006 : $checkToken;
            $this->data = json_error_exception($checkToken);
        } else {
            $this->data['data'] = array(
                'access_token' => $jwt->createToken($checkToken['params'], 60 * 5, 'access_token'),
                'expire_in' => 60 * 60 * 2,
                'token_type' => 'Bearer',
            );
        }
        return json($this->data);
    }

    /**
     * 查询广告位图
     * @return \think\response\Json
     * @throws \Exception
     */
    public function banner()
    {
        $this->data['data'] = model('Ad')->field('title,cover_url,url,content')->where('status', 1)->order('sort asc')->select()->toArray();
        return json($this->data);
    }

    /**
     * 发放优惠券
     */
    public function grant(){

    }

    /**
     * 获取活动商品
     */
    public function activity(){

    }
}
